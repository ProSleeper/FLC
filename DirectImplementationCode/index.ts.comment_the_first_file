/**
 * 간단하게 전체적인 코드 정리만 추가해보자.
 * 230628 수정.
 */

const TILE_SIZE = 30; //한 칸의 타일 사이즈
const FPS = 30; //단어 그대로 Frame Per Second 60으로 하면 초당 60번 그려지고, 144로 하면 144번 그려진다.
const SLEEP = 1000 / FPS; //fps를 토대로 1회 주기 fps가 30이면 1초당 33.333333.. 번을 그리니까 SLEEP의 값은 33.333333..

//타일의 종류 enum
enum Tile {
    AIR,
    FLUX,
    UNBREAKABLE,
    PLAYER,
    STONE,
    FALLING_STONE,
    BOX,
    FALLING_BOX,
    KEY1,
    LOCK1,
    KEY2,
    LOCK2,
}

//사용자의 입력 enum
enum Input {
    UP,
    DOWN,
    LEFT,
    RIGHT,
}

//플레이어의 x,y위치를 나타내는 변수
let playerx = 1;
let playery = 1;

//실제 맵의 크기와 해당 위치에 어떤 타일이 존재하는 지를 표현한 2차원 배열
let map: Tile[][] = [
    [2, 2, 2, 2, 2, 2, 2, 2],
    [2, 3, 0, 1, 1, 2, 0, 2],
    [2, 4, 2, 6, 1, 2, 0, 2],
    [2, 8, 4, 1, 1, 2, 0, 2],
    [2, 4, 1, 1, 1, 9, 0, 2],
    [2, 2, 2, 2, 2, 2, 2, 2],
];

//사용자의 입력을 담는 배열
//처음에는 무슨 용도인지 몰랐는데 아래 코드를 보고나니 queue로 사용하는 것을 알았다.
//사용자의 입력을 queue 자료구조로 사용하면 얻는 이점이 너무 많아서 좋은 것 같다.
//언제나 사용자의 입력 순서를 유지하는 게 가능하고, 키가 씹히거나 하는 부분을 방지해주고.. 생각해보면 여러가지 장점이 있는 것 같다.
//나중에 이런 순서를 지켜야하는 코드를 만들때 꼭꼭 queue를 사용하자.
let inputs: Input[] = [];

/*
 * 인자로 해당하는 타일 오브젝트를 전달하고, 해당 오브젝트를 찾아서 삭제(tile의 값을 Tile.AIR로 변경)
 * 이런 부분이 C++과 다른언어랑 같이 하다보면 헷갈리는 부분이다.
 * C++에서는 아래와 같은 함수를 만들면 포인터를 주거나 참조형으로 넘겨야 하는데
 * js나 java는 둘다 객체를 넘기면 참조값으로 넘겨주니까 같은 값을 찾을 수 있다.
 */
function remove(tile: Tile) {
    for (let y = 0; y < map.length; y++) {
        for (let x = 0; x < map[y].length; x++) {
            if (map[y][x] === tile) {
                map[y][x] = Tile.AIR;
            }
        }
    }
}

/*
 * 플레이어가 맵에서 움직이는 것을 표현해주는 함수.
 * 함수 자체는 굉장히 간단하다.
 * 함수의 인자로 새로운 xy를 받고
 * 현재 플레이어의 위치를 지우고
 * 새로운 xy위치에 플레이어를 그리고
 * 플레이어의 위치는 나타내는 playerx,y 변수의 값을 변경.
 */
// 근데 이런 간단한 함수를 보면서 느끼지만 이렇게 간단하게 만드는 게 더 어려운 것 같다.
function moveToTile(newx: number, newy: number) {
    map[playery][playerx] = Tile.AIR;
    map[newy][newx] = Tile.PLAYER;
    playerx = newx;
    playery = newy;
}

//함수를 설명하기 전에 함수의 인자만 보고 굳이 +1과 -1을 인자로 넣어줘야하나? 라는 생각을 가졌던 나를 반성해야지.
//이렇게 하면 이 함수 하나로 상하 이동을 모두 표현이 가능하지만 상수로 설정하거나 입력받는 게 아니면 더 많은 코드 혹은 2개의 함수가 필요할 것 같다.

/**
 * 키보드의 좌우 or ad입력을 받아서 실행하는 함수이다.
 * dx는 이동하는 방향과 칸이다. 현재는 1칸씩만 이동이라서 +1과 -1값만 인자로 들어오지만, 만약 추후에 2칸 이동 기능을 만든다고 했을때
 * 이렇게 만들어 두면 따로 수정할 것 없이 인자의 값만 +2,-2만 주면 된다.
 * 그리고 map[y][x] 처럼 2차원 배열이고 y가 행이고 x가 열로 표현되는데 이건 위에 작성된 map 배열 데이터를 확인해보면 이해가 간다.
 * 조건이 4개인데 이건 코드적인 내용은 없고, 그냥 게임의 룰을 판단하는 부분이다.
 * 이해하는데는 아주 좋게, 정말 간단하게 잘 만든 함수인 것 같다.
 * 다만 확실히 가독성 부분에서는 별로이긴하다.
 * 조건 4가지를 차라리 함수로 빼는 게 훨씬 나아보이긴 한다.
 */
function moveHorizontal(dx: number) {
    if (map[playery][playerx + dx] === Tile.FLUX || map[playery][playerx + dx] === Tile.AIR) {
        moveToTile(playerx + dx, playery);
    } else if (
        (map[playery][playerx + dx] === Tile.STONE || map[playery][playerx + dx] === Tile.BOX) &&
        map[playery][playerx + dx + dx] === Tile.AIR &&
        map[playery + 1][playerx + dx] !== Tile.AIR
    ) {
        map[playery][playerx + dx + dx] = map[playery][playerx + dx];
        moveToTile(playerx + dx, playery);
    } else if (map[playery][playerx + dx] === Tile.KEY1) {
        remove(Tile.LOCK1);
        moveToTile(playerx + dx, playery);
    } else if (map[playery][playerx + dx] === Tile.KEY2) {
        remove(Tile.LOCK2);
        moveToTile(playerx + dx, playery);
    }
}

/**
 * 키보드의 상하 or ws입력을 받아서 실행하는 함수이다.
 * 위에서 moveHorizontal 함수와 비슷한게 많아서 크게 설명할 부분이 없다.
 * 키보드가 입력되면 플레이어가 이동할 Tile을 확인하는 코드이고 마찬가지로 게임의 룰이다.
 */
function moveVertical(dy: number) {
    if (map[playery + dy][playerx] === Tile.FLUX || map[playery + dy][playerx] === Tile.AIR) {
        moveToTile(playerx, playery + dy);
    } else if (map[playery + dy][playerx] === Tile.KEY1) {
        remove(Tile.LOCK1);
        moveToTile(playerx, playery + dy);
    } else if (map[playery + dy][playerx] === Tile.KEY2) {
        remove(Tile.LOCK2);
        moveToTile(playerx, playery + dy);
    }
}

/*
 * 게임의 상태를 업데이트 해주는 함수
 * window.addEventListner로 keydown을 등록해두어서
 * keydown 이벤트가 발생하면 inputs.length의 값이 0보다 커지고 해당하는 값을 읽어와서 처리한다.
 * 이때 keydown 이벤트를 inputs배열에 넣는 아주 중요한 이유가 존재한다.
 * inputs는 단순 배열이지만 이걸 처리하는 코드를 보면 inputs를 queue처럼 사용한다.
 * 사용자의 입력이 동시에 다중으로 들어와도(물론 멀티스레드나 비동기가 아닌 이상 100% 동시는 아니지만)
 * 키가 씹히거나 하는 일 없이(물론 키보드가 멀티키를 지원해야겠지만..) 순서대로 처리가 된다!
 * 이 부분은 정말 단순하게 보이지만 너무너무 중요한 부분인 것 같다.
 * 여튼 키보드의 입력이 발생하면 해당 이동 처리를 한다.
 * 
 
 */
function update() {
    while (inputs.length > 0) {
        let current = inputs.pop();
        if (current === Input.LEFT) moveHorizontal(-1);
        else if (current === Input.RIGHT) moveHorizontal(1);
        else if (current === Input.UP) moveVertical(-1);
        else if (current === Input.DOWN) moveVertical(1);
    }

    //플레이어의 이동이 완료되면, 플레이어의 이동으로 인해서 변경된 맵을 게임의 룰에 따라서 처리해주는 코드이다.
    //아직 정확한 룰을 잘 몰라서 정확한 처리는 잘 모르겠지만,
    //첫번째 if 부분은 Tile의 값이 STONE or FALLING_STONE and Tile의 아래(유저가 보는)가 AIR이면
    //Tile의 아래 Tile로 돌이 떨어지는 것을 구현한 것 같다.
    //마찬가지로 나머지 else if 부분도 동일한 게임의 룰 처리인 것 같다.
    //마지막으로 주석친 // for (let y = 0; y < map.length; y++) { 이 부분을 왜 굳이 반대로 했는지 아직은 잘 모르겠다.
    //사용자가 보는 화면을 기준으로 설명해보면 제일 아래부터 Tile의 값을 판단하는데 그럴 필요가 있는건가?
    //이건 책 진도를 나아가면서 알아가보자.

    for (let y = map.length - 1; y >= 0; y--) {
        // for (let y = 0; y < map.length; y++) {
        for (let x = 0; x < map[y].length; x++) {
            if ((map[y][x] === Tile.STONE || map[y][x] === Tile.FALLING_STONE) && map[y + 1][x] === Tile.AIR) {
                map[y + 1][x] = Tile.FALLING_STONE;
                map[y][x] = Tile.AIR;
            } else if ((map[y][x] === Tile.BOX || map[y][x] === Tile.FALLING_BOX) && map[y + 1][x] === Tile.AIR) {
                map[y + 1][x] = Tile.FALLING_BOX;
                map[y][x] = Tile.AIR;
            } else if (map[y][x] === Tile.FALLING_STONE) {
                map[y][x] = Tile.STONE;
            } else if (map[y][x] === Tile.FALLING_BOX) {
                map[y][x] = Tile.BOX;
            }
        }
    }
}

/**
 * update 함수 실행으로 처리가 완료된 내용을 화면에 그린다.
 * canvas 나 getContext("2d"), fillStyle 이런 부분들은 브라우저에 그리기 위해서 브라우저가 지원하는 기능을 쓴다고 보면 된다.
 * 만약 다른 플랫폼이나 다른 환경에서 이런 게임을 구현해야한다면 달라져야하는 부분들이다.
 * 중요한 것은 // Draw map을 해주는 부분이다.
 * 중요하긴 하지만 막상 보면 되게 간단하다
 * map 배열을 모두 반복해서 해당 Tile의 값에 맞는 색상을 g.fillStyle로 선택하고
 * 해당 Tile의 값이 AIR or Player가 아니라면 선택된 색상을 그려준다.
 * 이때 살짝 중요할 수 있는 건 플레이어를 그리는 순서이다.
 * 플레이어가 어떤 x,y 위치에 있을텐데 이때 플레이어보다 Tile을 먼저 그리면 플레이어가 안보이기 때문에
 * 그리는 순서가 전체 Tile을 모두 그린 후 Player 그리도록 되어있다.
 *
 */
function draw() {
    let canvas = document.getElementById("GameCanvas") as HTMLCanvasElement;
    let g = canvas.getContext("2d");

    g.clearRect(0, 0, canvas.width, canvas.height);

    // Draw map
    for (let y = 0; y < map.length; y++) {
        for (let x = 0; x < map[y].length; x++) {
            if (map[y][x] === Tile.FLUX) g.fillStyle = "#ccffcc";
            else if (map[y][x] === Tile.UNBREAKABLE) g.fillStyle = "#999999";
            else if (map[y][x] === Tile.STONE || map[y][x] === Tile.FALLING_STONE) g.fillStyle = "#0000cc";
            else if (map[y][x] === Tile.BOX || map[y][x] === Tile.FALLING_BOX) g.fillStyle = "#8b4513";
            else if (map[y][x] === Tile.KEY1 || map[y][x] === Tile.LOCK1) g.fillStyle = "#ffcc00";
            else if (map[y][x] === Tile.KEY2 || map[y][x] === Tile.LOCK2) g.fillStyle = "#00ccff";

            if (map[y][x] !== Tile.AIR && map[y][x] !== Tile.PLAYER)
                g.fillRect(x * TILE_SIZE, y * TILE_SIZE, TILE_SIZE, TILE_SIZE);
        }
    }

    // Draw player
    g.fillStyle = "#ff0000";
    g.fillRect(playerx * TILE_SIZE, playery * TILE_SIZE, TILE_SIZE, TILE_SIZE);
}

/**
 * c나 자바의 main 함수 부분이라고 보면된다.
 * update와 draw를 실행하는 부분이다.
 * 옛날에 대학이나 가끔 게임을 만들어봐서 알지만 보통 게임이 다 이런 구조로 되어있다.
 * update + draw. 즉 데이터를 업데이트하고, 업데이트 된 데이터를 그린다!
 * 이거 순서도 중요하다. 만약 draw를 먼저하면 이미 그려졌는데 내 플레이어는 다른 곳에 있고 그런다.
 * 여튼 다시 돌아와서 update와 draw함수를 호출하고 이 2개의 함수의 실행 시간을 구하고 그만큼을 SLEEP값에서 빼서
 * 함수의 실행 시간은 원래 차이가 나기 마련인데 이 부분을 최소화 했다.
 * 그리고 setTimeout함수로 재귀아닌 것 같지만 재귀함수를 만들어서 gameLoop 함수가 계속 실행되도록 만든다.
 * 이것도 위에서 본 moveToTile 함수처럼 되게 어려운 코드는 아니지만 간단하게 잘 구현한 것 같다.
 * 특히 frame이 일정하도록 하는 코드가 되게 간단하면서도 모르거나 안해봤으면 어려운 부분인 것 같다.
 */
function gameLoop() {
    let before = Date.now();
    update();
    draw();
    let after = Date.now();
    let frameTime = after - before;
    let sleep = SLEEP - frameTime;

    setTimeout(() => {
        console.log(sleep);
        gameLoop();
    }, sleep);
}

//브라우저 내장 함수 사용
//window.onload는 웹페이지가 브라우저에서 완전히 로드가 된 후 실행되는 이벤트 함수
//궁금해서 검색해봤는데 DOM의 표준 사양 중 하나인 "DOM Level 2 Event Model"에 정의된 DOM의 이벤트 처리 표준 방법이라고 한다.
//단순하게 모든 브라우저에서 지원하는 이벤트 처리 방법이라고 보면된다.

window.onload = () => {
    gameLoop();
};

const LEFT_KEY = "ArrowLeft";
const UP_KEY = "ArrowUp";
const RIGHT_KEY = "ArrowRight";
const DOWN_KEY = "ArrowDown";

//keydown(키보드 누름) 이벤트가 발생하면 실행할 콜백함수를 등록.
//방향키 or wasd 를 누르면 해당하는 enum값을 inputs배열에 넣는다.
//inputs 배열에 넣는 이유는 update함수에 있다.
window.addEventListener("keydown", (e) => {
    if (e.key === LEFT_KEY || e.key === "a") inputs.push(Input.LEFT);
    else if (e.key === UP_KEY || e.key === "w") inputs.push(Input.UP);
    else if (e.key === RIGHT_KEY || e.key === "d") inputs.push(Input.RIGHT);
    else if (e.key === DOWN_KEY || e.key === "s") inputs.push(Input.DOWN);
});
